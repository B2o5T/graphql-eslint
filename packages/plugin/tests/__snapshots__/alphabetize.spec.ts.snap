// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
‚ùå Error 1/2

  1 |
  2 |         type User {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ \`firstName\` should be before \`password\`.
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         type User {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ \`age\` should be before \`firstName\`.
  6 |           lastName: String!
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         type User {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 2`] = `
‚ùå Error 1/1

  1 |
  2 |         extend type User {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ \`lastName\` should be before \`password\`.
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend type User {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 3`] = `
‚ùå Error 1/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
> 4 |           bb: Int
    |           ^^ \`bb\` should be before \`cc\`.
  5 |           aa: Int
  6 |         }
  7 |       

‚ùå Error 2/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
  4 |           bb: Int
> 5 |           aa: Int
    |           ^^ \`aa\` should be before \`bb\`.
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         interface Test {
    3 |           aa: Int
    4 |           bb: Int
    5 |           cc: Int
    6 |         }
    7 |       
`;

exports[` 4`] = `
‚ùå Error 1/2

  1 |
  2 |         input UserInput {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ \`firstName\` should be before \`password\`.
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         input UserInput {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ \`age\` should be before \`firstName\`.
  6 |           lastName: String!
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         input UserInput {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 5`] = `
‚ùå Error 1/1

  1 |
  2 |         extend input UserInput {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ \`lastName\` should be before \`password\`.
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend input UserInput {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 6`] = `
‚ùå Error 1/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
> 4 |           ADMIN
    |           ^^^^^ \`ADMIN\` should be before \`SUPER_ADMIN\`.
  5 |           USER
  6 |           GOD
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
  4 |           ADMIN
  5 |           USER
> 6 |           GOD
    |           ^^^ \`GOD\` should be before \`USER\`.
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         enum Role {
    3 |           ADMIN
    4 |           GOD
    5 |           SUPER_ADMIN
    6 |           USER
    7 |         }
    8 |       
`;

exports[` 7`] = `
‚ùå Error 1/1

  1 |
  2 |         extend enum Role {
  3 |           ADMIN
  4 |           SUPER_ADMIN
> 5 |           GOD
    |           ^^^ \`GOD\` should be before \`SUPER_ADMIN\`.
  6 |           USER
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend enum Role {
    3 |           ADMIN
    4 |           GOD
    5 |           SUPER_ADMIN
    6 |           USER
    7 |         }
    8 |       
`;

exports[` 8`] = `
‚ùå Error 1/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                  ^^ \`bb\` should be before \`cc\`.
  3 |       

‚ùå Error 2/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                           ^^ \`aa\` should be before \`bb\`.
  3 |       

üîß Autofix output

    1 |
    2 |         directive @test(aa: Int, bb: Int, cc: Int) on FIELD_DEFINITION
    3 |       
`;

exports[` 9`] = `
‚ùå Error 1/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                         ^^ \`bb\` should be before \`cc\`.
  4 |         }
  5 |       

‚ùå Error 2/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                                  ^^ \`aa\` should be before \`bb\`.
  4 |         }
  5 |       

üîß Autofix output

    1 |
    2 |         type Query {
    3 |           test(aa: Int, bb: Int, cc: Int): Int
    4 |         }
    5 |       
`;

exports[` 10`] = `
‚ùå Error 1/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
> 4 |           bb
    |           ^^ \`bb\` should be before \`cc\`.
  5 |           aa
  6 |         }
  7 |       

‚ùå Error 2/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
  4 |           bb
> 5 |           aa
    |           ^^ \`aa\` should be before \`bb\`.
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         fragment TestFields on Test {
    3 |           aa
    4 |           bb
    5 |           cc
    6 |         }
    7 |       
`;

exports[` 11`] = `
‚ùå Error 1/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             ... on Test {
   6 |               ccc
>  7 |               bbb
     |               ^^^ \`bbb\` should be before \`ccc\`.
   8 |               aaa
   9 |             }
  10 |             bb
  11 |             aa
  12 |           }
  13 |         }
  14 |       

‚ùå Error 2/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             ... on Test {
   6 |               ccc
   7 |               bbb
>  8 |               aaa
     |               ^^^ \`aaa\` should be before \`bbb\`.
   9 |             }
  10 |             bb
  11 |             aa
  12 |           }
  13 |         }
  14 |       

‚ùå Error 3/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             ... on Test {
   6 |               ccc
   7 |               bbb
   8 |               aaa
   9 |             }
> 10 |             bb
     |             ^^ \`bb\` should be before inline fragment.
  11 |             aa
  12 |           }
  13 |         }
  14 |       

‚ùå Error 4/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             ... on Test {
   6 |               ccc
   7 |               bbb
   8 |               aaa
   9 |             }
  10 |             bb
> 11 |             aa
     |             ^^ \`aa\` should be before \`bb\`.
  12 |           }
  13 |         }
  14 |       

üîß Autofix output

     1 |
     2 |         query {
     3 |           test {
     4 |             aa
     5 |             bb
     6 |             cc
     7 |             ... on Test {
     8 |               aaa
     9 |               bbb
    10 |               ccc
    11 |             }
    12 |           }
    13 |         }
    14 |       
`;

exports[` 12`] = `
‚ùå Error 1/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                              ^^ \`bb\` should be before \`cc\`.
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 2/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                                        ^^ \`aa\` should be before \`bb\`.
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 3/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                          ^^^ \`bbb\` should be before \`ccc\`.
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 4/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                                    ^^^ \`aaa\` should be before \`bbb\`.
  4 |             something
  5 |           }
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         mutation ($aa: Int, $bb: Int, $cc: Int) {
    3 |           test(aaa: $aa, bbb: $bb, ccc: $cc) {
    4 |             something
    5 |           }
    6 |         }
    7 |       
`;

exports[` 13`] = `
‚ùå Error 1/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
>  8 |           c: Float!
     |           ^ \`c\` should be before \`d\`.
   9 |           # before b 1
  10 |           # before b 2
  11 |           b: [String] # same b
  12 |           # before a
  13 |           a: [Int!]! # same a
  14 |           # end
  15 |         } # } character
  16 |       

‚ùå Error 2/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
   8 |           c: Float!
   9 |           # before b 1
  10 |           # before b 2
> 11 |           b: [String] # same b
     |           ^ \`b\` should be before \`c\`.
  12 |           # before a
  13 |           a: [Int!]! # same a
  14 |           # end
  15 |         } # } character
  16 |       

‚ùå Error 3/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
   8 |           c: Float!
   9 |           # before b 1
  10 |           # before b 2
  11 |           b: [String] # same b
  12 |           # before a
> 13 |           a: [Int!]! # same a
     |           ^ \`a\` should be before \`b\`.
  14 |           # end
  15 |         } # } character
  16 |       

üîß Autofix output

     1 |
     2 |         type Test { # { character
     3 |           # before a
     4 |           a: [Int!]! # same a
     5 |           # before b 1
     6 |           # before b 2
     7 |           b: [String] # same b
     8 |           # before c
     9 |           c: Float!
    10 |           # before d 1
    11 |
    12 |           # before d 2
    13 |           d: Int # same d
    14 |           # end
    15 |         } # } character
    16 |       
`;

exports[` 14`] = `
‚ùå Error 1/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
>  5 |           foo
     |           ^^^ \`foo\` should be before \`qux\`.
   6 |           "Bar"
   7 |           Bar
   8 |           """
   9 |           bar
  10 |           """
  11 |           bar
  12 |         }
  13 |       

‚ùå Error 2/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
   5 |           foo
   6 |           "Bar"
>  7 |           Bar
     |           ^^^ \`Bar\` should be before \`foo\`.
   8 |           """
   9 |           bar
  10 |           """
  11 |           bar
  12 |         }
  13 |       

‚ùå Error 3/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
   5 |           foo
   6 |           "Bar"
   7 |           Bar
   8 |           """
   9 |           bar
  10 |           """
> 11 |           bar
     |           ^^^ \`bar\` should be before \`Bar\`.
  12 |         }
  13 |       

üîß Autofix output

     1 |
     2 |         enum Test {
     3 |           """
     4 |           bar
     5 |           """
     6 |           bar
     7 |           "Bar"
     8 |           Bar
     9 |           foo
    10 |           "qux"
    11 |           qux
    12 |         }
    13 |       
`;

exports[` 15`] = `
‚ùå Error 1/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
> 12 |         fragment UserFields on User {
     |                  ^^^^^^^^^^ \`UserFields\` should be before \`UserInput\`.
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 2/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
> 16 |         type User # same type User
     |              ^^^^ \`User\` should be before \`UserFields\`.
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 3/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
> 18 |         extend enum Role {
     |                     ^^^^ \`Role\` should be before \`User\`.
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 4/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
> 26 |         mutation CreateUser {
     |                  ^^^^^^^^^^ \`CreateUser\` should be before operation definition.
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 5/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
> 40 |         interface Node # same interface Node
     |                   ^^^^ \`Node\` should be before \`RootQuery\`.
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 6/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
> 44 |         scalar Email # same scalar Email
     |                ^^^^^ \`Email\` should be before \`Role\`.
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 7/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
> 48 |         extend type User {
     |                     ^^^^ \`User\` should be before \`UserInput\`.
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 8/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
> 56 |         union Data = User | Node # same union Data
     |               ^^^^ \`Data\` should be before schema definition.
  57 |         # before directive @auth
  58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
  59 |         # END
  60 |       

‚ùå Error 9/9

   1 |
   2 |         # START
   3 |         
   4 |         # before1 extend union Data
   5 |         # before2 extend union Data
   6 |         extend union Data = Role # same extend union Data
   7 |         # before extend input UserInput
   8 |         extend input UserInput {
   9 |           email: Email!
  10 |         } # same extend input UserInput
  11 |         # before fragment UserFields
  12 |         fragment UserFields on User {
  13 |           id
  14 |         } # same fragment UserFields
  15 |         # before type User
  16 |         type User # same type User
  17 |         # before extend enum Role
  18 |         extend enum Role {
  19 |           SUPERMAN
  20 |         } # same extend enum Role
  21 |         # before anonymous operation
  22 |         query {
  23 |           foo
  24 |         } # same anonymous operation
  25 |         # before mutation CreateUser
  26 |         mutation CreateUser {
  27 |           createUser
  28 |         } # same mutation CreateUser
  29 |         # before extend interface Node
  30 |         extend interface Node {
  31 |           createdAt: String!
  32 |         } # same extend interface Node
  33 |         # before extend interface Node
  34 |         extend interface Node {
  35 |           updatedAt: String!
  36 |         } # same extend interface Node
  37 |         # before type RootQuery
  38 |         type RootQuery # same type RootQuery
  39 |         # before interface Node
  40 |         interface Node # same interface Node
  41 |         # before enum Role
  42 |         enum Role # same enum Role
  43 |         # before scalar Email
  44 |         scalar Email # same scalar Email
  45 |         # before input UserInput
  46 |         input UserInput # same input UserInput
  47 |         # before extend type User
  48 |         extend type User {
  49 |           firstName: String!
  50 |         } # same extend type User
  51 |         # before schema definition
  52 |         schema {
  53 |           query: RootQuery
  54 |         } # same schema definition
  55 |         # before union Data
  56 |         union Data = User | Node # same union Data
  57 |         # before directive @auth
> 58 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
     |                    ^^^^ \`auth\` should be before \`Data\`.
  59 |         # END
  60 |       

üîß Autofix output

     1 |
     2 |         # START
     3 |         
     4 |         # before directive @auth
     5 |         directive @auth(role: [Role!]!) on FIELD_DEFINITION # same directive @auth
     6 |         # before mutation CreateUser
     7 |         mutation CreateUser {
     8 |           createUser
     9 |         } # same mutation CreateUser
    10 |         # before union Data
    11 |         union Data = User | Node # same union Data
    12 |         # before1 extend union Data
    13 |         # before2 extend union Data
    14 |         extend union Data = Role # same extend union Data
    15 |         # before scalar Email
    16 |         scalar Email # same scalar Email
    17 |         # before interface Node
    18 |         interface Node # same interface Node
    19 |         # before extend interface Node
    20 |         extend interface Node {
    21 |           createdAt: String!
    22 |         } # same extend interface Node
    23 |         # before extend interface Node
    24 |         extend interface Node {
    25 |           updatedAt: String!
    26 |         } # same extend interface Node
    27 |         # before enum Role
    28 |         enum Role # same enum Role
    29 |         # before extend enum Role
    30 |         extend enum Role {
    31 |           SUPERMAN
    32 |         } # same extend enum Role
    33 |         # before type RootQuery
    34 |         type RootQuery # same type RootQuery
    35 |         # before type User
    36 |         type User # same type User
    37 |         # before extend type User
    38 |         extend type User {
    39 |           firstName: String!
    40 |         } # same extend type User
    41 |         # before fragment UserFields
    42 |         fragment UserFields on User {
    43 |           id
    44 |         } # same fragment UserFields
    45 |         # before input UserInput
    46 |         input UserInput # same input UserInput
    47 |         # before extend input UserInput
    48 |         extend input UserInput {
    49 |           email: Email!
    50 |         } # same extend input UserInput
    51 |         # before anonymous operation
    52 |         query {
    53 |           foo
    54 |         } # same anonymous operation
    55 |         # before schema definition
    56 |         schema {
    57 |           query: RootQuery
    58 |         } # same schema definition
    59 |         # END
    60 |       
`;
