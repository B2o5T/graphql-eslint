// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
‚ùå Error 1/2

  1 |
  2 |         type User {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ "firstName" should be before "password"
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         type User {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ "age" should be before "firstName"
  6 |           lastName: String!
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         type User {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 2`] = `
‚ùå Error 1/1

  1 |
  2 |         extend type User {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ "lastName" should be before "password"
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend type User {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 3`] = `
‚ùå Error 1/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
> 4 |           bb: Int
    |           ^^ "bb" should be before "cc"
  5 |           aa: Int
  6 |         }
  7 |       

‚ùå Error 2/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
  4 |           bb: Int
> 5 |           aa: Int
    |           ^^ "aa" should be before "bb"
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         interface Test {
    3 |           aa: Int
    4 |           bb: Int
    5 |           cc: Int
    6 |         }
    7 |       
`;

exports[` 4`] = `
‚ùå Error 1/2

  1 |
  2 |         input UserInput {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ "firstName" should be before "password"
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         input UserInput {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ "age" should be before "firstName"
  6 |           lastName: String!
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         input UserInput {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 5`] = `
‚ùå Error 1/1

  1 |
  2 |         extend input UserInput {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ "lastName" should be before "password"
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend input UserInput {
    3 |           age: Int
    4 |           firstName: String!
    5 |           lastName: String!
    6 |           password: String
    7 |         }
    8 |       
`;

exports[` 6`] = `
‚ùå Error 1/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
> 4 |           ADMIN
    |           ^^^^^ "ADMIN" should be before "SUPER_ADMIN"
  5 |           USER
  6 |           GOD
  7 |         }
  8 |       

‚ùå Error 2/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
  4 |           ADMIN
  5 |           USER
> 6 |           GOD
    |           ^^^ "GOD" should be before "USER"
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         enum Role {
    3 |           ADMIN
    4 |           GOD
    5 |           SUPER_ADMIN
    6 |           USER
    7 |         }
    8 |       
`;

exports[` 7`] = `
‚ùå Error 1/1

  1 |
  2 |         extend enum Role {
  3 |           ADMIN
  4 |           SUPER_ADMIN
> 5 |           GOD
    |           ^^^ "GOD" should be before "SUPER_ADMIN"
  6 |           USER
  7 |         }
  8 |       

üîß Autofix output

    1 |
    2 |         extend enum Role {
    3 |           ADMIN
    4 |           GOD
    5 |           SUPER_ADMIN
    6 |           USER
    7 |         }
    8 |       
`;

exports[` 8`] = `
‚ùå Error 1/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                  ^^ "bb" should be before "cc"
  3 |       

‚ùå Error 2/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                           ^^ "aa" should be before "bb"
  3 |       

üîß Autofix output

    1 |
    2 |         directive @test(aa: Int, bb: Int, cc: Int) on FIELD_DEFINITION
    3 |       
`;

exports[` 9`] = `
‚ùå Error 1/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                         ^^ "bb" should be before "cc"
  4 |         }
  5 |       

‚ùå Error 2/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                                  ^^ "aa" should be before "bb"
  4 |         }
  5 |       

üîß Autofix output

    1 |
    2 |         type Query {
    3 |           test(aa: Int, bb: Int, cc: Int): Int
    4 |         }
    5 |       
`;

exports[` 10`] = `
‚ùå Error 1/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
> 4 |           bb
    |           ^^ "bb" should be before "cc"
  5 |           aa
  6 |         }
  7 |       

‚ùå Error 2/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
  4 |           bb
> 5 |           aa
    |           ^^ "aa" should be before "bb"
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         fragment TestFields on Test {
    3 |           aa
    4 |           bb
    5 |           cc
    6 |         }
    7 |       
`;

exports[` 11`] = `
‚ùå Error 1/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
>  5 |             bb
     |             ^^ "bb" should be before "cc"
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

‚ùå Error 2/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
>  6 |             aa
     |             ^^ "aa" should be before "bb"
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

‚ùå Error 3/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
>  9 |               bbb
     |               ^^^ "bbb" should be before "ccc"
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

‚ùå Error 4/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
> 10 |               aaa
     |               ^^^ "aaa" should be before "bbb"
  11 |             }
  12 |           }
  13 |         }
  14 |       

üîß Autofix output

     1 |
     2 |         query {
     3 |           test {
     4 |             aa
     5 |             bb
     6 |             cc
     7 |             ... on Test {
     8 |               aaa
     9 |               bbb
    10 |               ccc
    11 |             }
    12 |           }
    13 |         }
    14 |       
`;

exports[` 12`] = `
‚ùå Error 1/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                              ^^ "$bb" should be before "$cc"
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 2/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                                        ^^ "$aa" should be before "$bb"
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 3/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                          ^^^ "bbb" should be before "ccc"
  4 |             something
  5 |           }
  6 |         }
  7 |       

‚ùå Error 4/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                                    ^^^ "aaa" should be before "bbb"
  4 |             something
  5 |           }
  6 |         }
  7 |       

üîß Autofix output

    1 |
    2 |         mutation ($aa: Int, $bb: Int, $cc: Int) {
    3 |           test(aaa: $aa, bbb: $bb, ccc: $cc) {
    4 |             something
    5 |           }
    6 |         }
    7 |       
`;

exports[` 13`] = `
‚ùå Error 1/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |           
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
>  8 |           c: Float!
     |           ^ "c" should be before "d"
   9 |           # before b 1
  10 |           # before b 2
  11 |           b: [String] # same b
  12 |           # before a
  13 |           a: [Int!]! # same a
  14 |           # end
  15 |         } # } character
  16 |       

‚ùå Error 2/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |           
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
   8 |           c: Float!
   9 |           # before b 1
  10 |           # before b 2
> 11 |           b: [String] # same b
     |           ^ "b" should be before "c"
  12 |           # before a
  13 |           a: [Int!]! # same a
  14 |           # end
  15 |         } # } character
  16 |       

‚ùå Error 3/3

   1 |
   2 |         type Test { # { character
   3 |           # before d 1
   4 |           
   5 |           # before d 2
   6 |           d: Int # same d
   7 |           # before c
   8 |           c: Float!
   9 |           # before b 1
  10 |           # before b 2
  11 |           b: [String] # same b
  12 |           # before a
> 13 |           a: [Int!]! # same a
     |           ^ "a" should be before "b"
  14 |           # end
  15 |         } # } character
  16 |       

üîß Autofix output

     1 |
     2 |         type Test { # { character
     3 |           # before a
     4 |           a: [Int!]! # same a
     5 |           # before b 1
     6 |           # before b 2
     7 |           b: [String] # same b
     8 |           # before c
     9 |           c: Float!
    10 |           # before d 1
    11 |           
    12 |           # before d 2
    13 |           d: Int # same d
    14 |           # end
    15 |         } # } character
    16 |       
`;

exports[` 14`] = `
‚ùå Error 1/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
>  5 |           foo
     |           ^^^ "foo" should be before "qux"
   6 |           "Bar"
   7 |           Bar
   8 |           """
   9 |           bar
  10 |           """
  11 |           bar
  12 |         }
  13 |       

‚ùå Error 2/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
   5 |           foo
   6 |           "Bar"
>  7 |           Bar
     |           ^^^ "Bar" should be before "foo"
   8 |           """
   9 |           bar
  10 |           """
  11 |           bar
  12 |         }
  13 |       

‚ùå Error 3/3

   1 |
   2 |         enum Test {
   3 |           "qux"
   4 |           qux
   5 |           foo
   6 |           "Bar"
   7 |           Bar
   8 |           """
   9 |           bar
  10 |           """
> 11 |           bar
     |           ^^^ "bar" should be before "Bar"
  12 |         }
  13 |       

üîß Autofix output

     1 |
     2 |         enum Test {
     3 |           """
     4 |           bar
     5 |           """
     6 |           bar
     7 |           "Bar"
     8 |           Bar
     9 |           foo
    10 |           "qux"
    11 |           qux
    12 |         }
    13 |       
`;
