// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
Error 1/2

  1 |
  2 |         type User {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ "firstName" should be before "password"
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

Error 2/2

  1 |
  2 |         type User {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ "age" should be before "firstName"
  6 |           lastName: String!
  7 |         }
  8 |       

Autofix output

type User {
  age: Int
  firstName: String!
  lastName: String!
  password: String
}
`;

exports[` 2`] = `
Error 1/1

  1 |
  2 |         extend type User {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ "lastName" should be before "password"
  7 |         }
  8 |       

Autofix output

extend type User {
  age: Int
  firstName: String!
  lastName: String!
  password: String
}
`;

exports[` 3`] = `
Error 1/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
> 4 |           bb: Int
    |           ^^ "bb" should be before "cc"
  5 |           aa: Int
  6 |         }
  7 |       

Error 2/2

  1 |
  2 |         interface Test {
  3 |           cc: Int
  4 |           bb: Int
> 5 |           aa: Int
    |           ^^ "aa" should be before "bb"
  6 |         }
  7 |       

Autofix output

interface Test {
  aa: Int
  bb: Int
  cc: Int
}
`;

exports[` 4`] = `
Error 1/2

  1 |
  2 |         input UserInput {
  3 |           password: String
> 4 |           firstName: String!
    |           ^^^^^^^^^ "firstName" should be before "password"
  5 |           age: Int
  6 |           lastName: String!
  7 |         }
  8 |       

Error 2/2

  1 |
  2 |         input UserInput {
  3 |           password: String
  4 |           firstName: String!
> 5 |           age: Int
    |           ^^^ "age" should be before "firstName"
  6 |           lastName: String!
  7 |         }
  8 |       

Autofix output

input UserInput {
  age: Int
  firstName: String!
  lastName: String!
  password: String
}
`;

exports[` 5`] = `
Error 1/1

  1 |
  2 |         extend input UserInput {
  3 |           age: Int
  4 |           firstName: String!
  5 |           password: String
> 6 |           lastName: String!
    |           ^^^^^^^^ "lastName" should be before "password"
  7 |         }
  8 |       

Autofix output

extend input UserInput {
  age: Int
  firstName: String!
  lastName: String!
  password: String
}
`;

exports[` 6`] = `
Error 1/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
> 4 |           ADMIN
    |           ^^^^^ "ADMIN" should be before "SUPER_ADMIN"
  5 |           USER
  6 |           GOD
  7 |         }
  8 |       

Error 2/2

  1 |
  2 |         enum Role {
  3 |           SUPER_ADMIN
  4 |           ADMIN
  5 |           USER
> 6 |           GOD
    |           ^^^ "GOD" should be before "USER"
  7 |         }
  8 |       

Autofix output

enum Role {
  ADMIN
  GOD
  SUPER_ADMIN
  USER
}
`;

exports[` 7`] = `
Error 1/1

  1 |
  2 |         extend enum Role {
  3 |           ADMIN
  4 |           SUPER_ADMIN
> 5 |           GOD
    |           ^^^ "GOD" should be before "SUPER_ADMIN"
  6 |           USER
  7 |         }
  8 |       

Autofix output

extend enum Role {
  ADMIN
  GOD
  SUPER_ADMIN
  USER
}
`;

exports[` 8`] = `
Error 1/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                  ^^ "bb" should be before "cc"
  3 |       

Error 2/2

  1 |
> 2 |         directive @test(cc: Int, bb: Int, aa: Int) on FIELD_DEFINITION
    |                                           ^^ "aa" should be before "bb"
  3 |       

Autofix output

directive @test(aa: Int, bb: Int, cc: Int) on FIELD_DEFINITION
`;

exports[` 9`] = `
Error 1/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                         ^^ "bb" should be before "cc"
  4 |         }
  5 |       

Error 2/2

  1 |
  2 |         type Query {
> 3 |           test(cc: Int, bb: Int, aa: Int): Int
    |                                  ^^ "aa" should be before "bb"
  4 |         }
  5 |       

Autofix output

type Query {
  test(aa: Int, bb: Int, cc: Int): Int
}
`;

exports[` 10`] = `
Error 1/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
> 4 |           bb
    |           ^^ "bb" should be before "cc"
  5 |           aa
  6 |         }
  7 |       

Error 2/2

  1 |
  2 |         fragment TestFields on Test {
  3 |           cc
  4 |           bb
> 5 |           aa
    |           ^^ "aa" should be before "bb"
  6 |         }
  7 |       

Autofix output

fragment TestFields on Test {
  aa
  bb
  cc
}
`;

exports[` 11`] = `
Error 1/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
>  5 |             bb
     |             ^^ "bb" should be before "cc"
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

Error 2/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
>  6 |             aa
     |             ^^ "aa" should be before "bb"
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

Error 3/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
>  9 |               bbb
     |               ^^^ "bbb" should be before "ccc"
  10 |               aaa
  11 |             }
  12 |           }
  13 |         }
  14 |       

Error 4/4

   1 |
   2 |         query {
   3 |           test {
   4 |             cc
   5 |             bb
   6 |             aa
   7 |             ... on Test {
   8 |               ccc
   9 |               bbb
> 10 |               aaa
     |               ^^^ "aaa" should be before "bbb"
  11 |             }
  12 |           }
  13 |         }
  14 |       

Autofix output

query {
  test {
    aa
    bb
    cc
    ... on Test {
      aaa
      bbb
      ccc
    }
  }
}
`;

exports[` 12`] = `
Error 1/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                             ^^^ "$bb" should be before "$cc"
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

Error 2/4

  1 |
> 2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
    |                                       ^^^ "$aa" should be before "$bb"
  3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
  4 |             something
  5 |           }
  6 |         }
  7 |       

Error 3/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                          ^^^ "bbb" should be before "ccc"
  4 |             something
  5 |           }
  6 |         }
  7 |       

Error 4/4

  1 |
  2 |         mutation ($cc: Int, $bb: Int, $aa: Int) {
> 3 |           test(ccc: $cc, bbb: $bb, aaa: $aa) {
    |                                    ^^^ "aaa" should be before "bbb"
  4 |             something
  5 |           }
  6 |         }
  7 |       

Autofix output

mutation ($aa: Int, $bb: Int, $cc: Int) {
  test(aaa: $aa, bbb: $bb, ccc: $cc) {
    something
  }
}
`;

exports[` 13`] = `
Error 1/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           # between 'cc' and 'c'
> 5 |           c: Float
    |           ^ "c" should be before "cc"
  6 |           bb: String
  7 |           aa: Int
  8 |         }
  9 |       

Error 2/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           # between 'cc' and 'c'
  5 |           c: Float
> 6 |           bb: String
    |           ^^ "bb" should be before "c"
  7 |           aa: Int
  8 |         }
  9 |       

Error 3/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           # between 'cc' and 'c'
  5 |           c: Float
  6 |           bb: String
> 7 |           aa: Int
    |           ^^ "aa" should be before "bb"
  8 |         }
  9 |       

Autofix output

type Test {
  cc: Int
  # between 'cc' and 'c'
  c: Float
  aa: Int
  bb: String
}
`;

exports[` 14`] = `
Error 1/3

  1 |
  2 |         type Test {
  3 |           cc: Int
> 4 |           c: Float
    |           ^ "c" should be before "cc"
  5 |           # ok for 'cc' and 'c' but not for 'bb' and 'aa'
  6 |           bb: String
  7 |           aa: Int
  8 |         }
  9 |       

Error 2/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           c: Float
  5 |           # ok for 'cc' and 'c' but not for 'bb' and 'aa'
> 6 |           bb: String
    |           ^^ "bb" should be before "c"
  7 |           aa: Int
  8 |         }
  9 |       

Error 3/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           c: Float
  5 |           # ok for 'cc' and 'c' but not for 'bb' and 'aa'
  6 |           bb: String
> 7 |           aa: Int
    |           ^^ "aa" should be before "bb"
  8 |         }
  9 |       

Autofix output

type Test {
  c: Float
  cc: Int
  # ok for 'cc' and 'c' but not for 'bb' and 'aa'
  bb: String
  aa: Int
}
`;

exports[` 15`] = `
Error 1/3

  1 |
  2 |         type Test {
  3 |           cc: Int
> 4 |           c: Float # ok for 'bb' and 'aa' but not for 'cc' and 'c'
    |           ^ "c" should be before "cc"
  5 |           bb: String
  6 |           aa: Int
  7 |         }
  8 |       

Error 2/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           c: Float # ok for 'bb' and 'aa' but not for 'cc' and 'c'
> 5 |           bb: String
    |           ^^ "bb" should be before "c"
  6 |           aa: Int
  7 |         }
  8 |       

Error 3/3

  1 |
  2 |         type Test {
  3 |           cc: Int
  4 |           c: Float # ok for 'bb' and 'aa' but not for 'cc' and 'c'
  5 |           bb: String
> 6 |           aa: Int
    |           ^^ "aa" should be before "bb"
  7 |         }
  8 |       

Autofix output

type Test {
  cc: Int
  c: Float # ok for 'bb' and 'aa' but not for 'cc' and 'c'
  aa: Int
  bb: String
}
`;
