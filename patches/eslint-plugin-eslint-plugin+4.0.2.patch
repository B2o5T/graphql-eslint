diff --git a/node_modules/eslint-plugin-eslint-plugin/lib/rules/no-only-tests.js b/node_modules/eslint-plugin-eslint-plugin/lib/rules/no-only-tests.js
index f680961..c9a08b4 100644
--- a/node_modules/eslint-plugin-eslint-plugin/lib/rules/no-only-tests.js
+++ b/node_modules/eslint-plugin-eslint-plugin/lib/rules/no-only-tests.js
@@ -31,7 +31,7 @@ module.exports = {
 
               const onlyProperty = test.properties.find(
                 property =>
-                  property.key.type === 'Identifier' &&
+                  property.key?.type === 'Identifier' &&
                   property.key.name === 'only' &&
                   property.value.type === 'Literal' &&
                   property.value.value
diff --git a/node_modules/eslint-plugin-eslint-plugin/lib/utils.js b/node_modules/eslint-plugin-eslint-plugin/lib/utils.js
index d7a2b82..326d387 100644
--- a/node_modules/eslint-plugin-eslint-plugin/lib/utils.js
+++ b/node_modules/eslint-plugin-eslint-plugin/lib/utils.js
@@ -24,10 +24,10 @@ function isNormalFunctionExpression (node) {
 */
 function isRuleTesterConstruction (node) {
   return node.type === 'NewExpression' && (
-    (node.callee.type === 'Identifier' && node.callee.name === 'RuleTester') ||
+    (node.callee.type === 'Identifier' && node.callee.name === 'GraphQLRuleTester') ||
     (node.callee.type === 'MemberExpression' &&
       node.callee.property.type === 'Identifier' &&
-      node.callee.property.name === 'RuleTester')
+      node.callee.property.name === 'GraphQLRuleTester')
   );
 }
 
@@ -85,12 +85,17 @@ function isFunctionRule (node) {
 /**
  * Helper for `getRuleInfo`. Handles ESM and TypeScript rules.
  */
-function getRuleExportsESM (ast) {
+function getRuleExportsESM (ast, scopeManager) {
   return ast.body
     .filter(statement => statement.type === 'ExportDefaultDeclaration')
     .map(statement => statement.declaration)
     // eslint-disable-next-line unicorn/prefer-object-from-entries
     .reduce((currentExports, node) => {
+      // Check `const rule = { create() {}, meta: {} }; export default rule`
+      if (node.type === 'Identifier' && scopeManager) {
+        const variable = findVariable(scopeManager.globalScope, node);
+        return collectInterestingProperties(variable.defs[0].node.init.properties, INTERESTING_RULE_KEYS);
+      }
       if (node.type === 'ObjectExpression') {
         // Check `export default { create() {}, meta: {} }`
         return collectInterestingProperties(node.properties, INTERESTING_RULE_KEYS);
@@ -218,7 +223,7 @@ module.exports = {
   from the file, the return value will be `null`.
   */
   getRuleInfo ({ ast, scopeManager }) {
-    const exportNodes = ast.sourceType === 'module' ? getRuleExportsESM(ast) : getRuleExportsCJS(ast);
+    const exportNodes = ast.sourceType === 'module' ? getRuleExportsESM(ast, scopeManager) : getRuleExportsCJS(ast);
 
     const createExists = Object.prototype.hasOwnProperty.call(exportNodes, 'create');
     if (!createExists) {
@@ -317,7 +322,7 @@ module.exports = {
           variableIdentifiers.has(statement.expression.callee.object)
         ) &&
         statement.expression.callee.property.type === 'Identifier' &&
-        statement.expression.callee.property.name === 'run'
+        statement.expression.callee.property.name === 'runGraphQLTests'
       ) {
         runCalls.push(statement.expression);
       }
