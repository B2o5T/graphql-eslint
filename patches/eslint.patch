diff --git a/lib/linter/linter.js b/lib/linter/linter.js
index e5d4d2c789c584a525a6aacb3c347c4dd06a5f27..a2c575f2d65f549def753314a2d86999a983b4c1 100644
--- a/lib/linter/linter.js
+++ b/lib/linter/linter.js
@@ -47,7 +47,8 @@ const { normalizeSeverityToString } = require("../shared/severity");
 const jslang = require("../languages/js");
 const { activeFlags, inactiveFlags } = require("../shared/flags");
 const debug = require("debug")("eslint:linter");
-const MAX_AUTOFIX_PASSES = 10;
+// ðŸš¨ 10 is not enough for alphabetize test with definitions sorting
+const MAX_AUTOFIX_PASSES = 20
 const DEFAULT_PARSER_NAME = "espree";
 const DEFAULT_ECMA_VERSION = 5;
 const commentParser = new ConfigCommentParser();
diff --git a/lib/rule-tester/rule-tester.js b/lib/rule-tester/rule-tester.js
index 756490e1df3d97ef47cc42f120ecda8813ec9f73..00a7146fe0be6574528cc053f69e454bfbead059 100644
--- a/lib/rule-tester/rule-tester.js
+++ b/lib/rule-tester/rule-tester.js
@@ -101,6 +101,7 @@ let sharedDefaultConfig = { rules: {} };
  * configuration
  */
 const RuleTesterParameters = [
+    "assertMessages",
     "name",
     "code",
     "filename",
@@ -1102,7 +1102,6 @@ class RuleTester {
                             assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${error.endColumn}`);
                         }
 
-                        assert.ok(!message.suggestions || hasOwnProperty(error, "suggestions"), `Error at index ${i} has suggestions. Please specify 'suggestions' property on the test error object.`);
                         if (hasOwnProperty(error, "suggestions")) {
 
                             // Support asserting there are no suggestions
@@ -1235,13 +1234,10 @@ class RuleTester {
                     assert.notStrictEqual(item.code, item.output, "Test property 'output' matches 'code'. If no autofix is expected, then omit the 'output' property or set it to null.");
                 }
             } else {
-                assert.strictEqual(
-                    result.output,
-                    item.code,
-                    "The rule fixed the code. Please add 'output' property."
-                );
+                // ðŸš¨ Don't need, as we assert autofix output with snapshots
             }
-
+            // used by @theguild/eslint-rule-tester
+            if (!process.cwd().includes('/examples/')) item.assertMessages(item, messages)
             assertASTDidntChange(result.beforeAST, result.afterAST);
         }
 
